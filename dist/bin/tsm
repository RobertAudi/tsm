#!/usr/bin/env zsh

# +----------------------------------------------------------------------------+ #
# |                             _                                              | #
# |                            | |_ ___ _ __ ___                               | #
# |                            | __/ __| '_ ` _ \                              | #
# |                            | |_\__ \ | | | | |                             | #
# |                             \__|___/_| |_| |_|                             | #
# |                                                                            | #
# |                            Tmux Session Manager                            | #
# |          Save and restore the state of tmux sessions and windows.          | #
# |                                                                            | #
# +----------------------------------------------------------------------------+ #

# |Setup| {{{
# ------------------------------------------------------------------------------

emulate -LR zsh

zmodload zsh/parameter
zmodload zsh/datetime

setopt extended_glob
setopt typeset_silent
setopt pipe_fail
setopt short_loops
setopt NO_clobber

# -------------------------------------------------------------------------- }}}

# |Configuration| {{{
# ------------------------------------------------------------------------------

: ${TSM_HOME:=$HOME/.tmux/tmux-sessions}
: ${TSM_SESSIONS_DIR:=$TSM_HOME/sessions}
: ${TSM_BACKUPS_DIR:=$TSM_HOME/backups}
: ${TSM_DEFAULT_SESSION_FILE:=$TSM_HOME/default-session.txt}
: ${TSM_BACKUPS_COUNT:=20}

command mkdir -p -m 700 \
  "$TSM_HOME" \
  "$TSM_SESSIONS_DIR" \
  "$TSM_BACKUPS_DIR" &>/dev/null

# -------------------------------------------------------------------------- }}}

# |Constants| {{{
# ------------------------------------------------------------------------------

local -A colors
colors=(
  info      "$(tput setaf 32)"
  warn      "$(tput setaf 221)"
  error     "$(tput setaf 196)"
  fatal     "$(tput setaf 7; tput setab 196)"
  success   "$(tput setaf 34)"
  white     "$(tput setaf 7)"
  red       "$(tput setaf 1)"
  green     "$(tput setaf 2)"
  blue      "$(tput setaf 4)"
  dimmed    "$(tput setaf 245)"
  bold      "$(tput bold)"
  underline "$(tput smul)"
  reset     "$(tput sgr0)"
)
readonly -l colors

local -A __tsm_commands
__tsm_commands=(
  list        "List saved sessions"
  show        "Show details about a session"
  save        "Save the current session"
  rename      "Rename a saved session"
  restore     "Restore a saved session"
  resume      "Restore and attach a saved session"
  quit        "Quit tmux"
  version     "Show version"
  help        "Show usage information"
)
readonly -l __tsm_commands

# -------------------------------------------------------------------------- }}}

local __tsm_version="0.1.0"
readonly __tsm_version

# Usage: command1 | and-pipe command2
#
# Pipes command1 to command2 only if command1 succeeds.
# If it doesn't, return its exit code.
# (i.e.: Its actual exit code, not just 1)
#
function __tsm::utils::and_pipe() {
  if [[ -p /dev/stdin ]]; then
    local out=$(</dev/stdin)
    local res=${pipestatus[1]}
    [[ $res == 0 ]] && { printf '%s\n' "$out" | "$@" } || return $res
  else
    "$@"
  fi
}

# Ask Yes/No question
function __tsm::utils::ask() {
  local query query_type="prompt"
  local -A opts
  zparseopts -D -A opts -- c p
  if (( ${+opts[c]} )); then
    query_type="confirmation"
  elif (( ${+opts[p]} )); then
    query_type="prompt"
  fi

  query="$(__tsm::utils::trim::trailing "$@")"
  case "$query_type" in
    confirmation) __tsm::utils::ask::confirmation "$query" ;;
    prompt) __tsm::utils::ask::prompt "$query" ;;
    *)
      __tsm::utils::log fatal "Invalid query type: $(__tsm::utils::colorize bold,white "${query_type}")"
      return 1
      ;;
  esac
}

function __tsm::utils::ask::prompt() {
  local prompt="$@"
  : ${prompt:=>}
  builtin read -e "?${prompt} "
}

function __tsm::utils::ask::confirmation() {
  local question="${@%\?}"
  : ${question:=Are you sure}
  builtin read -qs "?${question} [y/n] "
  # ???: This should probably be removed...
  local answer=$status ; builtin print ; return $answer
}

# |Colors| {{{
# ------------------------------------------------------------------------------

function __tsm::utils::color() {
  local color="$1" message="${@:2}"
  if (( ${+colors[$color]} )); then
    builtin print -n -- "${colors[$color]}$message"
  else
    builtin print -- "Invalid color: '$color'" >&2
    return 1
  fi
}

function __tsm::utils::colorize() {
  for c ("${(s:,:)1}") __tsm::utils::color "$c"
  builtin print -n -- "${@:2}${colors[reset]}"
}

# -------------------------------------------------------------------------- }}}

# Generate a formatted timestamp including milliseconds
function __tsm::utils::datetime() {
  # NOTE: Padding with leading 0s might mess with the
  # ordering at the millisecond level. If that's a prolem
  # then it's definitely not mine. Don't be a PITA.
  builtin printf "%s.%03d" "$(builtin strftime "%Y-%m-%dT%H:%M:%S" $epochtime[1])" "$(($epochtime[2] / 1000000))"
}

# This function will return width/height parameters
# that will be passed to the `tmux new-session` command
function __tsm::utils::dimensions_parameters() {
  command stty size 2>/dev/null | __tsm::utils::and_pipe \
    command awk '{ printf "-x%d -y%d", $2, $1 }' 2>/dev/null
}


# Generate a random filename
function __tsm::utils::filename() {
  builtin print -- "${1:-__tsm__}-$(__tsm::utils::datetime)"
}


# Check if tmux is running AND active
# (ie: we are inside a tmux session)
function __tsm::utils::inside_tmux() {
  { __tsm::utils::tmux_running && [[ -n "$TMUX" ]] } || return 1
  local -a tmux_info ; tmux_info=("${(s:,:)TMUX}")
  [[ -S "${tmux_info[1]}" ]] && builtin kill -s 0 "${tmux_info[2]}" &>/dev/null
}

# Log a message to STDERR.
# Messages are printed to STDERR instead of STDOUT
# so that logging can be silenced without hiding output
# that could be relevent (eg: output from other commands).
function __tsm::utils::log() {
  local prefix
  local level="${(L)1}"
  local level_color="$level"
  local message="${@:2}"

  case "$level" in
    info)    prefix="---"  ;;
    warn)    prefix="/!\\" ;;
    error)   prefix="!!!"  ;;
    fatal)   prefix="!!!"  ;;
    success) prefix="\\o/" ;;
    *)       prefix="-->"
      level="*" message="$@" level_color="dimmed"
      ;;
  esac

  integer -l left_padding=$(( 7 - ${#level} ))
  builtin printf "%s$(__tsm::utils::colorize $level "%*s")%-2s" "[" ${#level} "${(U)level}" "]" >&2
  builtin printf "$(__tsm::utils::colorize blue "%-4s")" "${prefix}" >&2
  builtin printf "%s\n" "$message" >&2
}

# Generate n (default: 1) random strings of c (default: 8) alphanumeric characters. Example:
# => n5E8smo0
function __tsm::utils::random() {
  local -A opts
  zparseopts -D -A opts -- c: n:

  integer -l chars
  if [[ "${opts[-c]}" = <-> && "${opts[-c]}" -gt 0 ]]; then
    chars="${opts[-c]}"
  else
    chars=8
  fi

  integer -l num
  if [[ "${opts[-n]}" = <-> && "${opts[-n]}" -gt 0 ]]; then
    num="${opts[-n]}"
  else
    num=1
  fi

  command cat /dev/urandom | command base64 | command tr -dc 'a-zA-Z0-9' \
    | command fold -w $chars | command head -n $num
}

# Print a separator across the terminal window
# This is essentially the equivalent of <hr>
# The character used for the ruler can be specified
# as the first argument.
function __tsm::utils::separator() {
  local width="$(tput cols)"
  local sep
  [[ -n "$1" ]] && sep="$1" || sep=$'\u2501'
  builtin print -r -- "${(pl:$width::$sep:)}"
}

# Check if a tmux session exists.
function __tsm::utils::session_exists() {
  command tmux has-session -t "$1" 2>/dev/null
}

# Check if the tmux server is running.
# I am not a fan of the approach used
# but it will have to do until I find
# a better way of doing it.
function __tsm::utils::tmux_running() {
  command tmux info &> /dev/null
}


function __tsm::utils::trim() {
  local -A opts
  zparseopts -D -A opts -- l t b
  if (( ${+opts[b]} )) || ! (( ${#opts} )); then
    __tsm::utils::trim::both "$@"
  else
    local string="$@"
    if (( ${+opts[l]} )); then
      string="$(__tsm::utils::trim::leading "$@")"
    fi
    if (( ${+opts[t]} )); then
      string="$(__tsm::utils::trim::trailing "$@")"
    fi
    builtin printf "%s" "$string"
  fi
}

function __tsm::utils::trim::leading() {
  builtin printf "%s" "${@#"${@%%[![:space:]]*}"}"
}

function __tsm::utils::trim::trailing() {
  builtin printf "%s" "${@%"${@##*[![:space:]]}"}"
}

function __tsm::utils::trim::both() {
  __tsm::utils::trim::trailing "$(__tsm::utils::trim::leading "$@")"
}

# Add a new tmux window
# Usage: __tsm::helpers::add_window <session_name> <window_name> <window_working_directory>
function __tsm::helpers::add_window() {
  local session_name="$1" window_name="$2" working_directory="$3"
  command tmux new-window -d -t "$session_name:" -n "$window_name" -c "$working_directory"
}

# Dump the list of tmux windows using the following
# three components separated by a tab character `\t`:
# - Session name
# - Window name
# - Window working directory path
#
# Caveat: Window panes are ignored.
function __tsm::helpers::dump() {
  local d=$'\t'
  # FIXME: Fail if tmux is not running
  # TODO: Find a way to dump all panes including enough info to be able to restore them
  command tmux list-panes -a -F "#S${d}#W${d}#{pane_current_path}"
}

# Create a new tmux session.
# A dummy window is created so that the working
# directory of new windows will default to "$HOME".
# Without the dummy window, the default working directory
# of new windows would be the one of the first window created.
function __tsm::helpers::new_session() {
  local session_name="$1" window_name="$2" window_working_directory="$3"
  local dimensions="${4:-$(__tsm::utils::dimensions_parameters)}"
  local session_working_directory dummy_window
  session_working_directory="$HOME"
  dummy_window="__dummy-window-${EPOCHREALTIME/./}-$(__tsm::utils::random)__"

  command tmux new-session -d -s "$session_name" -n "$dummy_window" -c "$HOME" $=dimensions
  __tsm::helpers::add_window "$session_name" "$window_name" "$window_working_directory"
  command tmux kill-window -t "$dummy_window"
}


# |Backup| {{{
# ------------------------------------------------------------------------------

# Delete old backup files and keep the n most recent ones.
# n is $1 or $TSM_BACKUPS_COUNT
# To be safe, the files will be removed only if they are
# readable and writable by the current user.
function __tsm::commands::backup::clean() {
  integer -l count
  local -a files
  files=("${TSM_BACKUPS_DIR}"/*.txt(.NOmf:u+rw:))
  count=${1:-TSM_BACKUPS_COUNT}
  if (( ${#files} > $count )); then
    count=$(( ${#files} - $count ))
    (( $count > 0 )) && command rm ${files[1, $count]}
  fi
}

function __tsm::commands::backup::list() {
  integer -l count
  local -a files
  local -A opts
  zparseopts -D -A opts -- a

  files=("${TSM_BACKUPS_DIR}"/*.txt(.NOmf:u+rw:))
  if (( ${+opts[-a]} )) || (( ${#files} <= $TSM_BACKUPS_COUNT )); then
    count=-1
  else
    count=$TSM_BACKUPS_COUNT
  fi

  builtin print -l -- ${files[1,$count]}
}

function __tsm::commands::backup::session() {
  local session_file="$1"
  if [[ ! -f "$session_file" ]]; then
    __tsm::utils::log error "Session file not found: '${session_file}'"
    return 1
  fi

  local session_dump
  session_dump="$(__tsm::helpers::dump)" || return $status

  local filename="$(__tsm::utils::filename).$(__tsm::utils::random).txt"
  [[ -n "$session_file" ]] && filename="${session_file:A:t:r}.${filename}"

  builtin print -- "$session_dump" > "${TSM_BACKUPS_DIR}/$filename" \
    && __tsm::commands::backup::clean
}

function __tsm::commands::backup() {
  local session_dump
  session_dump="$(__tsm::helpers::dump)" || return $status

  local filename="$(__tsm::utils::filename).$(__tsm::utils::random).txt"
  [[ -n "$1" ]] && filename="${1}.${filename}"

  builtin print -- "$session_dump" > "${TSM_BACKUPS_DIR}/$filename" \
    && __tsm::commands::backup::clean
}

# -------------------------------------------------------------------------- }}}

function __tsm::commands::help() {
  local cmd="$1"
  [[ "$cmd" == "tsm" ]] && { __tsm::commands::tsm ; return $status }
  if [[ -n "$cmd" ]] && (( ${+__tsm_commands[(k)$cmd]} )); then
    __tsm::commands::help::"$@"
  else
    cat <<Help-Message
Usage: tsm <command>

Commands:
$(builtin printf "  %-13s %s\n" "${(kv)__tsm_commands[@]}")
Help-Message
  fi
  return 64
}

function __tsm::commands::help::list() {
  cat <<Help-Message
Usage: tsm list
Help-Message
  return 64
}

function __tsm::commands::help::show() {
  cat <<Help-Message
Usage: tsm show <name>
Help-Message
  return 64
}

function __tsm::commands::help::save() {
  cat <<Help-Message
Usage: tsm save [name]
Help-Message
  return 64
}

function __tsm::commands::help::rename() {
  cat <<Help-Message
Usage: tsm rename <name> [new-name]
Help-Message
  return 64
}

function __tsm::commands::help::restore() {
  cat <<Help-Message
Usage: tsm restore <name>
Help-Message
  return 64
}

function __tsm::commands::help::resume() {
  cat <<Help-Message
Usage: tsm resume <name>
Help-Message
  return 64
}

function __tsm::commands::help::quit() {
  cat <<Help-Message
Usage: tsm quit
Help-Message
  return 64
}

function __tsm::commands::help::version() {
  cat <<Help-Message
Usage: tsm version
Help-Message
  return 64
}

function __tsm::commands::help::help() {
  cat <<Help-Message
Usage: tsm help [command]

Commands:
$(builtin printf "  %-13s %s\n" "${(kv)__tsm_commands[@]}")
Help-Message
  return 64
}

function __tsm::commands::list() {
  local -a session_files
  session_files=("${TSM_SESSIONS_DIR}"/*.txt(.NOmf:gu+r:))
  builtin print -- "$(__tsm::utils::colorize underline "Saved sessions:")\n"

  # Get the length of the longest filename
  # Source: Chapter 5, paragraph 1, of the "A Users guide to the Z-Shell"
  #   http://zsh.sourceforge.net/Guide/zshguide05.html
  integer -l padding
  padding=$(( ${#${session_files[(r)${(l.${#${(O@)session_files//?/X}[1]}..?.)}]}:t:r} + 2 ))

  integer -l sessions_count windows_count
  local -A session_registry

  for f in $session_files; do
    while IFS=$'\t' read session_name window_name dir; do
      windows_count+=1
      if ! (( ${+session_registry[$session_name]} )); then
        session_registry[$session_name]=$((session_registry[$session_name] + 1))
        sessions_count+=1
      fi
    done < "$f"

    builtin printf "$(__tsm::utils::colorize bold,white "%-*s")" $padding "${f:t:r}"
    builtin printf "($(__tsm::utils::colorize blue "%-2.0d") sessions and $(__tsm::utils::colorize blue "%3.0d") windows)" "$sessions_count" "$windows_count"
    builtin print -- ": $(__tsm::utils::colorize dimmed "$f")"

    windows_count=0 sessions_count=0 session_registry=()
  done

  builtin print -- "\nNumber of saved sessions: $(__tsm::utils::colorize blue "${#session_files}")"
}

# Create a backup of the current tmux session
# and then kill the tmux server
function __tsm::commands::quit() {
  __tsm::commands::backup &>/dev/null
  if command tmux kill-server &>/dev/null; then
    __tsm::utils::log success "tmux session ended"
  else
    __tsm::utils::log error "Failed to quit the tmux session"
    return 1
  fi
}

function __tsm::commands::rename() {
  local session_name="$1"
  if [[ -z "$session_name" ]]; then
    __tsm::utils::log error "Missing session name"
    __tsm::commands::help::rename
    return 1
  fi

  local session_file
  session_file="$TSM_SESSIONS_DIR/$session_name"
  [[ "${session_file:e}" == "txt" ]] || session_file+=".txt"

  if [[ ! -f "$session_file" ]]; then
    __tsm::utils::log error "Session not found: ${session_name}"
    builtin print
    __tsm::commands::list
    return 1
  fi

  local new_session_name="$(__tsm::utils::trim ${2:-$(__tsm::utils::ask -p "New name:")})"
  if [[ -z "$new_session_name" ]]; then
    __tsm::utils::log error "Missing session name"
    __tsm::commands::help::rename
    return 1
  elif [[ "$new_session_name" == "$session_name" ]]; then
    __tsm::utils::log error "The new session name $(__tsm::utils::colorize bold,white "$new_session_name") is the same as the current one $(__tsm::utils::colorize bold,white "$session_name")"
    __tsm::commands::help::rename
    return 1
  fi

  local new_session_file
  new_session_file="$TSM_SESSIONS_DIR/$new_session_name"
  [[ "${new_session_file:e}" == "txt" ]] || new_session_file+=".txt"

  if [[ -f "$new_session_file" ]]; then
    __tsm::utils::log warn "A session with the same name already exist: $(__tsm::utils::colorize bold,white "${new_session_name:r}")"
    if __tsm::utils::ask::confirmation "Do you want to override the existing session?"; then
      __tsm::commands::backup::session "$new_session_file"
    else
      __tsm::utils::log error "Failed to rename session: $(__tsm::utils::colorize bold,white "$session_name")"
      if [[ ! -r "$session_file" || ! -w "$session_file" ]]; then
        __tsm::utils::log error "Inaccessible session file: $(__tsm::utils::colorize bold,white "$session_file")"
      fi
      return 1
    fi
  fi

  __tsm::utils::log info "Renaming session: $(__tsm::utils::colorize bold,white "$session_name") -> $(__tsm::utils::colorize bold,white "$new_session_name")"
  command mv -f "$session_file" "$new_session_file" >/dev/null
}

# |Restore| {{{
# ------------------------------------------------------------------------------

# Find a resorable session file using the following steps:
#   1. File with name passed as a first argument ($1)
#   2. Last backup session file
#   3. Default session file
# A restorable session file must have the following characteristics:
#   - A size greater than zero
#   - Readable by the current process
function __tsm::commands::restore::restorable_file() {
  local session_file
  if [[ -n "$1" ]]; then
    session_file="$TSM_SESSIONS_DIR/$1"
    [[ "${session_file:e}" == "txt" ]] || session_file+=".txt"

    if [[ ! -f "$session_file" ]]; then
      __tsm::utils::log error "Session not found: ${session_name}"
      builtin print
      __tsm::commands::list
      return 1
    fi

    if [[ -s "$session_file" && -r "$session_file" ]]; then
      builtin print -ln -- "$session_file" ; return
    fi
  fi

  local -a backup_files
  backup_files=($(__tsm::commands::backup::list))
  session_file="${backup_files[-1]}"

  if [[ -s "$session_file" && -r "$session_file" ]]; then
    builtin print -ln -- "$session_file" ; return
  fi

  session_file="$TSM_DEFAULT_SESSION_FILE"
  if [[ -s "$session_file" && -r "$session_file" ]]; then
    builtin print -ln -- "$session_file" ; return
  fi

  __tsm::utils::log error "No session found"
  return 1
}

function __tsm::commands::restore() {
  integer -l sessions_count windows_count
  local session_file dimensions
  session_file="$(__tsm::commands::restore::restorable_file "$1")" || return $status

  command tmux start-server

  dimensions="$(__tsm::utils::dimensions_parameters)"

  while IFS=$'\t' read session_name window_name dir; do
    if [[ -d "$dir" && "$window_name" != "log" && "$window_name" != "man" ]]; then
      if __tsm::utils::session_exists "$session_name"; then
        __tsm::helpers::add_window "$session_name" "$window_name" "$dir"
      else
        __tsm::helpers::new_session "$session_name" "$window_name" "$dir" "$dimensions"
        sessions_count+=1
      fi
      windows_count+=1
    fi
  done < "$session_file"

  builtin print -- "Restored  $(__tsm::utils::colorize blue "$sessions_count") sessions and $(__tsm::utils::colorize blue "$windows_count") windows"
}

# -------------------------------------------------------------------------- }}}

# Restore a session and attach to one
# TODO: Specify which tmux session to attach to
function __tsm::commands::resume() {
  __tsm::commands::restore "$@" && { __tsm::utils::inside_tmux || command tmux attach }
}

# Save the current session. If a name is not specified
# as the first argument, one will be generated automatically.
# If a session with the same name exists, the user will be
# asked to confirm before override the existing one.
function __tsm::commands::save() {
  local session_dump
  session_dump="$(__tsm::helpers::dump)" || return $status

  local filename="${1:-$(__tsm::utils::filename)}.txt"
  local session_file="${TSM_SESSIONS_DIR}/$filename"

  if [[ -f "$session_file" ]]; then
    __tsm::utils::log warn "A session with the same name already exist: $(__tsm::utils::colorize bold,white "${filename:r}")"
    if __tsm::utils::ask::confirmation "Do you want to override the existing session?"; then
      __tsm::utils::log info "Overriding existing session: $(__tsm::utils::colorize bold,white "${filename:r}")"
      __tsm::commands::backup::session "$session_file"
    else
      __tsm::utils::log error "The current session was not saved"
      return 1
    fi
  fi

  if builtin print -- "$session_dump" >! "$session_file"; then
    __tsm::utils::log success "Session saved as $(__tsm::utils::colorize bold,white "${filename:r}") in $(__tsm::utils::colorize green "$session_file")"
  else
    __tsm::utils::log error "Unable to save the current session"
    return 1
  fi
}

function __tsm::commands::show() {
  local session_input_name="$1"
  if [[ -z "$session_input_name" ]]; then
    __tsm::utils::log error "Missing session name"
    return 1
  fi

  local session_file
  session_file="$TSM_SESSIONS_DIR/$session_input_name"
  [[ "${session_file:e}" == "txt" ]] || session_file+=".txt"

  if [[ ! -f "$session_file" ]]; then
    __tsm::utils::log error "Session not found: $session_input_name"
    builtin print
    __tsm::commands::list
    return 1
  elif [[ ! -r "$session_file" ]]; then
    __tsm::utils::log error "Inaccessible session: $session_input_name"
    return 1
  elif [[ ! -s "$session_file" ]]; then
    __tsm::utils::log error "Invalid session: $session_input_name"
    return 1
  else
    builtin print -- "Saved session: $(__tsm::utils::colorize bold,white "$session_input_name")"
  fi

  integer -l sessions_count windows_count
  local -A session_registry
  while IFS=$'\t' read session_name window_name dir; do
    if (( ${+session_registry[$session_name]} )); then
      session_registry[$session_name]=$((session_registry[$session_name] + 1))
    else
      builtin print
      session_registry[$session_name]=1
      sessions_count+=1
    fi
    windows_count+=1

    builtin print -- "$(__tsm::utils::colorize bold,white "${session_name}:") $window_name $(__tsm::utils::colorize dimmed "$dir")"
  done < "$session_file"

  builtin print -- "\nSummary: $(__tsm::utils::colorize blue "$sessions_count") sessions and $(__tsm::utils::colorize blue "$windows_count") windows"
  for k in "${(@k)session_registry}"; do
    builtin print -- "  - $(__tsm::utils::colorize bold,white "$k"): $(__tsm::utils::colorize blue "${session_registry[$k]}") windows"
  done

  builtin print -- "\nSession file path: $(__tsm::utils::colorize green "$session_file")"
}

function __tsm::commands::tsm() {
  cat <<"End-of-message"
                     [0;1;36;96m_[0m
                    [0;1;36;96m|[0m [0;1;34;94m|_[0m [0;1;35;95m_[0;1;31;91m__[0m [0;1;33;93m_[0m [0;1;32;92m_[0;1;36;96m_[0m [0;1;34;94m__[0;1;35;95m_[0m
                    [0;1;36;96m|[0m [0;1;34;94m__[0;1;35;95m/[0m [0;1;31;91m__[0;1;33;93m|[0m [0;1;32;92m'_[0m [0;1;36;96m`[0m [0;1;34;94m_[0m [0;1;35;95m\[0m
                    [0;1;36;96m|[0m [0;1;34;94m|_[0;1;35;95m\_[0;1;31;91m_[0m [0;1;33;93m\[0m [0;1;32;92m|[0m [0;1;36;96m|[0m [0;1;34;94m|[0m [0;1;35;95m|[0m [0;1;31;91m|[0m
                     [0;1;36;96m\[0;1;34;94m__[0;1;35;95m|_[0;1;31;91m__[0;1;33;93m/_[0;1;32;92m|[0m [0;1;36;96m|_[0;1;34;94m|[0m [0;1;35;95m|_[0;1;31;91m|[0m

                    [0;1;36;96mTm[0;1;34;94mux[0m [0;1;35;95mS[0;1;31;91mes[0;1;33;93msi[0;1;32;92mon[0m [0;1;36;96mM[0;1;34;94man[0;1;35;95mag[0;1;31;91mer[0m
  [0;1;31;91mSa[0;1;33;93mve[0m [0;1;32;92ma[0;1;36;96mnd[0m [0;1;34;94mr[0;1;35;95mes[0;1;31;91mto[0;1;33;93mre[0m [0;1;32;92mt[0;1;36;96mhe[0m [0;1;34;94ms[0;1;35;95mta[0;1;31;91mte[0m [0;1;33;93mo[0;1;32;92mf[0m [0;1;36;96mtm[0;1;34;94mux[0m [0;1;35;95ms[0;1;31;91mes[0;1;33;93msi[0;1;32;92mon[0;1;36;96ms[0m [0;1;34;94man[0;1;35;95md[0m [0;1;31;91mwi[0;1;33;93mnd[0;1;32;92mow[0;1;36;96ms.[0m

End-of-message
}

function __tsm::commands::version() {
  builtin print "$__tsm_version"
}

# ------------------------------------------------------------------------------

function __tsm::main() {
  local cmd="$1"
  [[ "$cmd" == "tsm" ]] && { __tsm::commands::tsm ; return $status }
  if [[ -n "$cmd" ]] && (( ${+__tsm_commands[(k)$cmd]} )); then
    __tsm::commands::"$cmd" "${@:2}"
  else
    __tsm::commands::help
    return 1
  fi
}

# ------------------------------------------------------------------------------

__tsm::main "$@"
